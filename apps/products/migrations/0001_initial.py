# Generated by Django 4.1.5 on 2023-02-20 14:17

import apps.products.utils.units
from django.db import migrations, models
import django.db.models.deletion
import django_measurement.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(max_length=150, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('background_image', models.ImageField(blank=True, null=True, upload_to='category-backgrounds', verbose_name='background_image')),
                ('test_image', models.CharField(blank=True, max_length=700, null=True, verbose_name='test_image')),
                ('is_active', models.BooleanField(default=False, verbose_name='is_active')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img_url', models.ImageField(upload_to='')),
                ('alt_text', models.CharField(max_length=255, verbose_name='img_url')),
                ('is_feature', models.BooleanField(default=False, verbose_name='alt_text')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='is_feature')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='created_at')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('slug', models.SlugField(max_length=255, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=False, verbose_name='is_active')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='is_recommended')),
                ('USA_product', models.BooleanField(default=False, verbose_name='USA_product')),
                ('status', models.CharField(choices=[('process', 'Process'), ('success', 'Success'), ('failed', 'Failed'), ('deleted', 'Deleted')], default='process', max_length=50, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='ProductAllModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'product_all',
                'verbose_name_plural': 'product_alls',
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attribute_value', models.CharField(max_length=255, verbose_name='attribute_value')),
            ],
        ),
        migrations.CreateModel(
            name='ProductAttributeValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ProductInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(max_length=20, unique=True, verbose_name='sku')),
                ('upc', models.CharField(max_length=12, unique=True, verbose_name='upc')),
                ('is_active', models.BooleanField(default=False, verbose_name='is_active')),
                ('is_default', models.BooleanField(default=False, verbose_name='is_default')),
                ('price', models.PositiveIntegerField(verbose_name='price')),
                ('sale_price', models.PositiveIntegerField(verbose_name='sale_price')),
                ('installment_plan', models.CharField(max_length=250, verbose_name='installment_plan')),
                ('is_on_sale', models.BooleanField(default=False, verbose_name='is_on_sale')),
                ('weight', django_measurement.models.MeasurementField(blank=True, measurement=apps.products.utils.units.Mass, null=True, verbose_name='weight')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='ProductTypeAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(verbose_name='rating')),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_checked', models.DateTimeField(blank=True, null=True, verbose_name='last_checked')),
                ('units', models.IntegerField(default=0, verbose_name='units')),
                ('units_sold', models.IntegerField(default=0, verbose_name='units_sold')),
            ],
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, verbose_name='date_added')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='product')),
            ],
        ),
    ]
