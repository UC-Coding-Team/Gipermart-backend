# Generated by Django 4.1.5 on 2023-02-20 14:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='wishlist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='stock',
            name='product_inventory',
            field=models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='product_inventory', to='products.productinventory', verbose_name='product_inventory'),
        ),
        migrations.AddField(
            model_name='rating',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.productinventory', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='producttypeattribute',
            name='product_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productattribute', to='products.productattribute', verbose_name='attributevalues'),
        ),
        migrations.AddField(
            model_name='producttypeattribute',
            name='product_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='producttype', to='products.producttype', verbose_name='productinventory'),
        ),
        migrations.AddField(
            model_name='producttype',
            name='product_type_attributes',
            field=models.ManyToManyField(related_name='product_type_attributes', through='products.ProductTypeAttribute', to='products.productattribute', verbose_name='product_type_attributes'),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='attribute_values',
            field=models.ManyToManyField(related_name='product_attribute_values', through='products.ProductAttributeValues', to='products.productattributevalue', verbose_name='attribute_values'),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='brand',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='brand', to='products.brand', verbose_name='brand'),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='product', to='products.product', verbose_name='product'),
        ),
        migrations.AddField(
            model_name='productinventory',
            name='product_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='product_type', to='products.producttype', verbose_name='product_type'),
        ),
        migrations.AddField(
            model_name='productattributevalues',
            name='attributevalues',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='attributevaluess', to='products.productattributevalue', verbose_name='attributevalues'),
        ),
        migrations.AddField(
            model_name='productattributevalues',
            name='productinventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='productattributevaluess', to='products.productinventory', verbose_name='productinventory'),
        ),
        migrations.AddField(
            model_name='productattributevalue',
            name='product_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='product_attribute', to='products.productattribute', verbose_name='product_attribute'),
        ),
        migrations.AddField(
            model_name='productallmodel',
            name='atributes_value',
            field=models.ManyToManyField(to='products.productattributevalue'),
        ),
        migrations.AddField(
            model_name='productallmodel',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.category'),
        ),
        migrations.AddField(
            model_name='productallmodel',
            name='products',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='product', to='products.category', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='product',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='media',
            name='product_inventory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='media', to='products.productinventory', verbose_name='product_inventory'),
        ),
        migrations.AddField(
            model_name='category',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='products.category', verbose_name='parent'),
        ),
        migrations.AlterUniqueTogether(
            name='producttypeattribute',
            unique_together={('product_attribute', 'product_type')},
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalues',
            unique_together={('attributevalues', 'productinventory')},
        ),
    ]
